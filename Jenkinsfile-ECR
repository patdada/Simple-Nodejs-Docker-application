pipeline {
    agent any
    options {
        timeout(time: 20, unit: 'MINUTES')
    }
    stages{
        // NPM dependencies
        stage('pull npm dependencies') {
            steps {
                sh 'npm install'
            }
        }
        // Run Unit test
        stage('Run Unit Test') {
            steps {
                sh 'npm test'
            }
        }
        // run sonarqube test
      //  stage('Run Sonarqube') {
        //    environment {
          //      scannerHome = tool 'ibt-sonarqube';
            //}
            //steps {
              //withSonarQubeEnv(credentialsId: 'ibt-sonar', installationName: 'IBT sonarqube') {
                //sh "${scannerHome}/bin/sonar-scanner"
              //}
            //}
        //}
        stage('build Docker Container') {
            steps {
                script {
                    // build image
                    docker.build("908778560637.dkr.ecr.us-east-1.amazonaws.com/nodejsapp:latest")
                }
            }
        }
        stage('Trivy Scan (Aqua)') {
            steps {
                sh 'trivy image --format template --output trivy_report.html 908778560637.dkr.ecr.us-east-1.amazonaws.com/nodejsapp:latest'
            }
       }
        stage('Push to ECR') {
            steps {
                script{
                    //https://<AwsAccountNumber>.dkr.ecr.<region>.amazonaws.com/rekeyole-app', 'ecr:<region>:<credentialsId>
                    docker.withRegistry('https://908778560637.dkr.ecr.us-east-1.amazonaws.com/nodejsapp', 'ecr:us-east-1:patdada-ecr') {
                    // build image
                    def myImage = docker.build("908778560637.dkr.ecr.us-east-1.amazonaws.com/nodejsapp:latest")
                    // push image
                    myImage.push()
                    }
                }
            }
        }
        
    }
}

